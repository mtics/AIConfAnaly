#!/usr/bin/env python3
"""
ÁîüÊàêÂ¢ûÂº∫ÁâàÂçïÈ°µÈù¢ÂèØËßÜÂåñ
ÁªìÂêàËØ¶ÁªÜÁªÜÂåñÂàÜÊûêÁöÑÊ∑±Â∫¶ÂèØËßÜÂåñÈ°µÈù¢
"""

import json
import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

class EnhancedVisualizationGenerator:
    """Â¢ûÂº∫ÁâàÂèØËßÜÂåñÁîüÊàêÂô®"""
    
    def __init__(self):
        self.frontend_dir = Path("frontend")
        self.frontend_dir.mkdir(exist_ok=True)
        
        # Âä†ËΩΩÊâÄÊúâÊï∞ÊçÆ
        self.load_all_data()
    
    def load_all_data(self):
        """Âä†ËΩΩÊâÄÊúâÂàÜÊûêÊï∞ÊçÆ"""
        # Âü∫Á°ÄÂàÜÊûêÊï∞ÊçÆ
        with open("outputs/analysis/comprehensive_analysis.json", 'r', encoding='utf-8') as f:
            self.analysis_data = json.load(f)
        
        # Ë∂ãÂäøÂàÜÊûêÊï∞ÊçÆ
        with open("outputs/trend_analysis/trend_analysis_report.json", 'r', encoding='utf-8') as f:
            self.trends_data = json.load(f)
        
        # Á†îÁ©∂Ë∂ãÂäøÊï∞ÊçÆ
        with open("outputs/research_trends/research_trends_analysis.json", 'r', encoding='utf-8') as f:
            self.research_trends_data = json.load(f)
        
        # ËØ¶ÁªÜÂàÜÊûêÊï∞ÊçÆ
        with open("outputs/detailed_analysis/detailed_comprehensive_analysis.json", 'r', encoding='utf-8') as f:
            self.detailed_data = json.load(f)
    
    def generate_enhanced_visualization(self):
        """ÁîüÊàêÂ¢ûÂº∫ÁâàÂèØËßÜÂåñÈ°µÈù¢"""
        print("üé® ÁîüÊàêÂ¢ûÂº∫ÁâàÂèØËßÜÂåñÈ°µÈù¢...")
        
        # Êï¥ÂêàÊâÄÊúâÊï∞ÊçÆ
        integrated_data = self.integrate_all_data()
        
        # ÁîüÊàêHTMLÈ°µÈù¢
        html_content = self.create_enhanced_html(integrated_data)
        
        # ‰øùÂ≠òÊñá‰ª∂
        output_file = self.frontend_dir / "enhanced_comprehensive_analysis.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ Â¢ûÂº∫ÁâàÂèØËßÜÂåñÈ°µÈù¢Â∑≤ÁîüÊàê: {output_file}")
        return output_file
    
    def integrate_all_data(self) -> Dict[str, Any]:
        """Êï¥ÂêàÊâÄÊúâÊï∞ÊçÆ"""
        return {
            'basic_analysis': self.analysis_data,
            'trends_analysis': self.trends_data,
            'research_trends': self.research_trends_data,
            'detailed_analysis': self.detailed_data,
            'generation_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total_papers': 31244,
            'years_span': "2018-2024",
            'conferences': ['NeuRIPS', 'ICLR', 'AAAI', 'ICML', 'IJCAI']
        }
    
    def create_enhanced_html(self, data: Dict[str, Any]) -> str:
        """ÂàõÂª∫Â¢ûÂº∫ÁâàHTMLÈ°µÈù¢"""
        return f"""<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AIÁ†îÁ©∂Ê∑±Â∫¶ÂàÜÊûê - Â¢ûÂº∫ÁâàÂÖ®ÊôØÂèØËßÜÂåñ</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.4.3/echarts.min.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Segoe UI', 'Microsoft YaHei', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
        }}

        .header {{
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }}

        .header-content {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}

        .header h1 {{
            font-size: 2.2em;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: bold;
        }}

        .header-stats {{
            display: flex;
            gap: 30px;
        }}

        .stat-item {{
            text-align: center;
        }}

        .stat-number {{
            font-size: 1.8em;
            font-weight: bold;
            color: #667eea;
        }}

        .stat-label {{
            font-size: 0.9em;
            color: #666;
        }}

        .nav-menu {{
            background: rgba(255, 255, 255, 0.9);
            padding: 15px 0;
            position: sticky;
            top: 90px;
            z-index: 999;
            border-bottom: 1px solid #e0e0e0;
        }}

        .nav-content {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 20px;
        }}

        .nav-item {{
            padding: 8px 16px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 20px;
            font-size: 0.9em;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }}

        .nav-item:hover {{
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }}

        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }}

        .section {{
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }}

        .section-title {{
            font-size: 2em;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid #667eea;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            display: flex;
            align-items: center;
            gap: 10px;
        }}

        .subsection {{
            margin-bottom: 25px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }}

        .subsection-title {{
            font-size: 1.3em;
            margin-bottom: 15px;
            color: #2c3e50;
            font-weight: 600;
        }}

        .chart-container {{
            width: 100%;
            height: 500px;
            margin: 20px 0;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }}

        .chart-container.large {{
            height: 600px;
        }}

        .chart-container.small {{
            height: 400px;
        }}

        .grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }}

        .insight-card {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 10px 0;
        }}

        .insight-title {{
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 10px;
        }}

        .insight-content {{
            font-size: 0.95em;
            line-height: 1.6;
        }}

        .data-table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }}

        .data-table th {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }}

        .data-table td {{
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
        }}

        .data-table tr:hover {{
            background: #f8f9fa;
        }}

        .metric-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}

        .metric-card {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border-top: 4px solid #667eea;
        }}

        .metric-value {{
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }}

        .metric-label {{
            font-size: 0.9em;
            color: #666;
        }}

        .trend-indicator {{
            display: inline-block;
            padding: 4px 8px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: bold;
        }}

        .trend-up {{ background: #e8f5e8; color: #2e7d32; }}
        .trend-down {{ background: #ffebee; color: #c62828; }}
        .trend-stable {{ background: #fff3e0; color: #f57c00; }}

        .progress-bar {{
            width: 100%;
            height: 20px;
            background: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }}

        .progress-fill {{
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transition: width 0.3s ease;
        }}

        @media (max-width: 768px) {{
            .header-content {{
                flex-direction: column;
                gap: 20px;
            }}

            .header-stats {{
                gap: 20px;
            }}

            .nav-content {{
                gap: 10px;
            }}

            .grid {{
                grid-template-columns: 1fr;
            }}

            .chart-container {{
                height: 400px;
            }}

            .metric-grid {{
                grid-template-columns: repeat(2, 1fr);
            }}
        }}

        .fade-in {{
            animation: fadeIn 0.8s ease-in;
        }}

        @keyframes fadeIn {{
            from {{ opacity: 0; transform: translateY(20px); }}
            to {{ opacity: 1; transform: translateY(0); }}
        }}
    </style>
</head>
<body>
    <!-- Â§¥ÈÉ®Âå∫Âüü -->
    <div class="header">
        <div class="header-content">
            <h1>üîç AIÁ†îÁ©∂Ê∑±Â∫¶ÂàÜÊûê - Â¢ûÂº∫ÁâàÂÖ®ÊôØÂèØËßÜÂåñ</h1>
            <div class="header-stats">
                <div class="stat-item">
                    <div class="stat-number">{data['total_papers']:,}</div>
                    <div class="stat-label">ÂàÜÊûêËÆ∫Êñá</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">5</div>
                    <div class="stat-label">È°∂Á∫ß‰ºöËÆÆ</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">7</div>
                    <div class="stat-label">Âπ¥‰ªΩË∑®Â∫¶</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">4</div>
                    <div class="stat-label">ÂàÜÊûêÁª¥Â∫¶</div>
                </div>
            </div>
        </div>
    </div>

    <!-- ÂØºËà™ËèúÂçï -->
    <div class="nav-menu">
        <div class="nav-content">
            <a href="#overview" class="nav-item">üìä ÊÄªËßà‰ª™Ë°®Êùø</a>
            <a href="#research-fields" class="nav-item">üî¨ Á†îÁ©∂È¢ÜÂüüÊ∑±Â∫¶ÂàÜÊûê</a>
            <a href="#applications" class="nav-item">üéØ Â∫îÁî®Âú∫ÊôØÂàÜÊûê</a>
            <a href="#technology" class="nav-item">üíª ÊäÄÊúØÂèëÂ±ïÂàÜÊûê</a>
            <a href="#tasks" class="nav-item">‚öôÔ∏è ‰ªªÂä°Âú∫ÊôØÂàÜÊûê</a>
            <a href="#insights" class="nav-item">üí° Ê∑±Â∫¶Ê¥ûÂØü</a>
            <a href="#predictions" class="nav-item">üîÆ ÂèëÂ±ïÈ¢ÑÊµã</a>
        </div>
    </div>

    <div class="container">
        <!-- ÊÄªËßà‰ª™Ë°®Êùø -->
        <section id="overview" class="section fade-in">
            <h2 class="section-title">üìä ÊÄªËßà‰ª™Ë°®Êùø</h2>
            
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-value">11</div>
                    <div class="metric-label">Á†îÁ©∂È¢ÜÂüü</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">10</div>
                    <div class="metric-label">Â∫îÁî®Âú∫ÊôØ</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">8</div>
                    <div class="metric-label">ÊäÄÊúØÁ±ªÂà´</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">6</div>
                    <div class="metric-label">‰ªªÂä°Á±ªÂûã</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">58.5%</div>
                    <div class="metric-label">ÊúÄÈ´òÂ¢ûÈïøÁéá</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">82K+</div>
                    <div class="metric-label">MLÊäÄÊúØÊèêÂèä</div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üåü Ê†∏ÂøÉÂèëÁé∞</h3>
                <div class="grid">
                    <div class="insight-card">
                        <div class="insight-title">üöÄ ManufacturingÈ¢ÜÂüüÂºÇÂÜõÁ™ÅËµ∑</div>
                        <div class="insight-content">Âπ¥Â§çÂêàÂ¢ûÈïøÁéáËææ58.5%ÔºåÂ±ïÁé∞Â∑®Â§ßÂèëÂ±ïÊΩúÂäõÔºåÈ¢ÑËÆ°Â∞ÜÊàê‰∏∫AIÂ∫îÁî®ÁöÑ‰∏ã‰∏Ä‰∏™ÁàÜÂèëÁÇπ„ÄÇ</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">üëë Educational TechnologyÁ®≥Â±ÖÈ¢ÜÂØºÂú∞‰Ωç</div>
                        <div class="insight-content">Á¥ØËÆ°10,071ÁØáËÆ∫ÊñáÔºå27.6%ÁöÑÁ®≥ÂÆöÂ¢ûÈïøÁéáÔºåÂú®AIÊïôËÇ≤Â∫îÁî®È¢ÜÂüüÊåÅÁª≠‰∏ªÂØº„ÄÇ</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">üí° ÁîüÊàêÂºèAIÂø´ÈÄüÂèëÂ±ï</div>
                        <div class="insight-content">Generation TasksÈáçË¶ÅÊÄß‰∏äÂçá0.64%ÔºåÊäÄÊúØÊàêÁÜüÂ∫¶Âø´ÈÄüÊèêÂçáÔºåÂïÜ‰∏öÂåñÂ∫îÁî®ÂâçÊôØÂπøÈòî„ÄÇ</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">üîó ÊäÄÊúØËûçÂêàË∂ãÂäøÊòéÊòæ</div>
                        <div class="insight-content">Ë∑®Â≠¶ÁßëÁ†îÁ©∂Â¢ûÂ§öÔºåAI+Vision„ÄÅAI+LanguageÁ≠âËûçÂêàÊ®°ÂºèÊó•Ë∂ãÊàêÁÜü„ÄÇ</div>
                    </div>
                </div>
            </div>

            <div class="chart-container large">
                <div id="overviewSankey"></div>
            </div>
        </section>

        <!-- Á†îÁ©∂È¢ÜÂüüÊ∑±Â∫¶ÂàÜÊûê -->
        <section id="research-fields" class="section fade-in">
            <h2 class="section-title">üî¨ Á†îÁ©∂È¢ÜÂüüÊ∑±Â∫¶ÂàÜÊûê</h2>
            
            <div class="subsection">
                <h3 class="subsection-title">üìà È¢ÜÂüüÂàÜÁ±ª‰ΩìÁ≥ª</h3>
                <div class="chart-container">
                    <div id="fieldCategoriesChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üéØ Á†îÁ©∂ÊàêÁÜüÂ∫¶ÂàÜÊûê</h3>
                <div class="grid">
                    <div class="chart-container small">
                        <div id="maturityScoreChart"></div>
                    </div>
                    <div class="chart-container small">
                        <div id="innovationIndexChart"></div>
                    </div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üîó Ë∑®Â≠¶ÁßëËøûÊé•ÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="interdisciplinaryChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üìä ËØ¶ÁªÜÊï∞ÊçÆË°®</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Á†îÁ©∂È¢ÜÂüü</th>
                            <th>ËÆ∫ÊñáÊï∞Èáè</th>
                            <th>CAGR</th>
                            <th>ÊàêÁÜüÂ∫¶</th>
                            <th>ÂàõÊñ∞ÊåáÊï∞</th>
                            <th>ÂèëÂ±ïÈò∂ÊÆµ</th>
                        </tr>
                    </thead>
                    <tbody id="researchFieldsTable">
                    </tbody>
                </table>
            </div>
        </section>

        <!-- Â∫îÁî®Âú∫ÊôØÂàÜÊûê -->
        <section id="applications" class="section fade-in">
            <h2 class="section-title">üéØ Â∫îÁî®Âú∫ÊôØÊ∑±Â∫¶ÂàÜÊûê</h2>
            
            <div class="subsection">
                <h3 class="subsection-title">üîÑ Âú∫ÊôØÁîüÂëΩÂë®ÊúüÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="lifecycleChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üìä Â∏ÇÂú∫Ê∏óÈÄèÂ∫¶‰∏éÊäÄÊúØÂ∞±Áª™Â∫¶</h3>
                <div class="grid">
                    <div class="chart-container small">
                        <div id="marketPenetrationChart"></div>
                    </div>
                    <div class="chart-container small">
                        <div id="technicalReadinessChart"></div>
                    </div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üíº ÂïÜ‰∏öÂΩ±ÂìçÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="businessImpactChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üè≠ Ë°å‰∏öÂàÜÂ∏ÉÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="industryDistributionChart"></div>
                </div>
            </div>
        </section>

        <!-- ÊäÄÊúØÂèëÂ±ïÂàÜÊûê -->
        <section id="technology" class="section fade-in">
            <h2 class="section-title">üíª ÊäÄÊúØÂèëÂ±ïÊ∑±Â∫¶ÂàÜÊûê</h2>
            
            <div class="subsection">
                <h3 class="subsection-title">üèóÔ∏è ÊäÄÊúØÂàÜÁ±ª‰ΩìÁ≥ª</h3>
                <div class="chart-container">
                    <div id="techTaxonomyChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üîÑ ÂàõÊñ∞Âë®ÊúüÂàÜÊûê</h3>
                <div class="grid">
                    <div class="chart-container small">
                        <div id="innovationCycleChart"></div>
                    </div>
                    <div class="chart-container small">
                        <div id="technologyMaturityChart"></div>
                    </div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üîó ÊäÄÊúØËûçÂêàÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="convergenceChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üî• Á†îÁ©∂ÁÉ≠ÁÇπËØÜÂà´</h3>
                <div class="chart-container">
                    <div id="researchHotspotsChart"></div>
                </div>
            </div>
        </section>

        <!-- ‰ªªÂä°Âú∫ÊôØÂàÜÊûê -->
        <section id="tasks" class="section fade-in">
            <h2 class="section-title">‚öôÔ∏è ‰ªªÂä°Âú∫ÊôØÊ∑±Â∫¶ÂàÜÊûê</h2>
            
            <div class="subsection">
                <h3 class="subsection-title">üß† ‰ªªÂä°Â§çÊùÇÂ∫¶ÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="taskComplexityChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">ü§ñ Ëá™Âä®ÂåñÂ∞±Áª™Â∫¶</h3>
                <div class="grid">
                    <div class="chart-container small">
                        <div id="automationReadinessChart"></div>
                    </div>
                    <div class="chart-container small">
                        <div id="humanAiCollaborationChart"></div>
                    </div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">‚öñÔ∏è ‰º¶ÁêÜËÄÉÈáèÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="ethicalConsiderationsChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üìà ÊÄßËÉΩÊåáÊ†á‰∏éËµÑÊ∫êÈúÄÊ±Ç</h3>
                <div class="grid">
                    <div class="chart-container small">
                        <div id="performanceMetricsChart"></div>
                    </div>
                    <div class="chart-container small">
                        <div id="resourceRequirementsChart"></div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Ê∑±Â∫¶Ê¥ûÂØü -->
        <section id="insights" class="section fade-in">
            <h2 class="section-title">üí° Ê∑±Â∫¶Ê¥ûÂØü</h2>
            
            <div class="subsection">
                <h3 class="subsection-title">üéØ ËûçÂêàÊú∫‰ºöËØÜÂà´</h3>
                <div class="chart-container">
                    <div id="convergenceOpportunitiesChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üöÄ ÂàõÊñ∞ÁÉ≠ÁÇπÈ¢ÑÊµã</h3>
                <div class="grid">
                    <div class="insight-card">
                        <div class="insight-title">Â§öÊ®°ÊÄÅAIËûçÂêà</div>
                        <div class="insight-content">ËÆ°ÁÆóÊú∫ËßÜËßâ„ÄÅËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ‰∏éÁêÜËß£‰ªªÂä°ÁöÑÊ∑±Â∫¶ËûçÂêàÔºåÂàõÊñ∞ËØÑÂàÜ85ÂàÜ</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">Ëá™‰∏ªÁ≥ªÁªüÂèëÂ±ï</div>
                        <div class="insight-content">Ëá™Âä®È©æÈ©∂„ÄÅÂº∫ÂåñÂ≠¶‰π†‰∏é‰ºòÂåñ‰ªªÂä°ÁªìÂêàÔºåÂàõÊñ∞ËØÑÂàÜ80ÂàÜ</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">Êô∫ËÉΩÂà∂ÈÄ†Á™ÅÁ†¥</div>
                        <div class="insight-content">Âà∂ÈÄ†‰∏öAI„ÄÅ‰ºòÂåñÊäÄÊúØ‰∏éÈ¢ÑÊµã‰ªªÂä°ËûçÂêàÔºåÊΩúÂäõÂ∑®Â§ß</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">ÁîüÊàêÂºèAIÂ∫îÁî®</div>
                        <div class="insight-content">ÂÜÖÂÆπÂàõ‰Ωú„ÄÅÁîüÊàêÊ®°Âûã‰∏éÂàõ‰Ωú‰ªªÂä°Ê∑±Â∫¶ÁªìÂêà</div>
                    </div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üí∞ ÊäïËµÑ‰ºòÂÖàÁ∫ßÂàÜÊûê</h3>
                <div class="chart-container">
                    <div id="investmentPriorityChart"></div>
                </div>
            </div>
        </section>

        <!-- ÂèëÂ±ïÈ¢ÑÊµã -->
        <section id="predictions" class="section fade-in">
            <h2 class="section-title">üîÆ ÂèëÂ±ïÈ¢ÑÊµã</h2>
            
            <div class="subsection">
                <h3 class="subsection-title">üìÖ Áü≠ÊúüË∂ãÂäøÈ¢ÑÊµã (2024-2025)</h3>
                <div class="chart-container">
                    <div id="shortTermTrendsChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üéØ ‰∏≠ÊúüÂèëÂ±ïÈ¢ÑÊµã (2025-2027)</h3>
                <div class="chart-container">
                    <div id="mediumTermTrendsChart"></div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üåü ÈïøÊúüÊÑøÊôØ (2027+)</h3>
                <div class="grid">
                    <div class="insight-card">
                        <div class="insight-title">‰∫∫Êú∫ËûçÂêàÊô∫ËÉΩ</div>
                        <div class="insight-content">Ê¶ÇÁéá40%ÔºåÈù©ÂëΩÊÄßÂΩ±ÂìçÔºå‰∫∫Á±ªÊô∫ËÉΩ‰∏éAIÊ∑±Â∫¶ËûçÂêà</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">Ëá™ÊàëËøõÂåñAI</div>
                        <div class="insight-content">Ê¶ÇÁéá30%ÔºåÈù©ÂëΩÊÄßÂΩ±ÂìçÔºåAIÁ≥ªÁªüËá™‰∏ªÂ≠¶‰π†ÂíåËøõÂåñ</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">ÊÑèËØÜAI</div>
                        <div class="insight-content">Ê¶ÇÁéá20%ÔºåÈù©ÂëΩÊÄßÂΩ±ÂìçÔºåÂÖ∑Â§áÊÑèËØÜÁöÑ‰∫∫Â∑•Êô∫ËÉΩÁ≥ªÁªü</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-title">ÈáèÂ≠êÊú∫Âô®Â≠¶‰π†</div>
                        <div class="insight-content">Ê¶ÇÁéá45%Ôºå‰∏≠Á≠âÂΩ±ÂìçÔºåÈáèÂ≠êËÆ°ÁÆó‰∏éÊú∫Âô®Â≠¶‰π†ÁªìÂêà</div>
                    </div>
                </div>
            </div>

            <div class="subsection">
                <h3 class="subsection-title">üìä 2025Âπ¥È¢ÜÂüüËßÑÊ®°È¢ÑÊµã</h3>
                <div class="chart-container">
                    <div id="prediction2025Chart"></div>
                </div>
            </div>
        </section>
    </div>

    <script>
        // ÂµåÂÖ•ÊâÄÊúâÊï∞ÊçÆ
        const allData = {json.dumps(data, ensure_ascii=False, indent=8)};
        
        // ÂàùÂßãÂåñÊâÄÊúâÂõæË°®
        document.addEventListener('DOMContentLoaded', function() {{
            initializeAllCharts();
            setupNavigation();
            populateDataTables();
        }});

        function initializeAllCharts() {{
            // ÊÄªËßàÊ°ëÂü∫Âõæ
            initOverviewSankey();
            
            // Á†îÁ©∂È¢ÜÂüüÂõæË°®
            initFieldCategoriesChart();
            initMaturityScoreChart();
            initInnovationIndexChart();
            initInterdisciplinaryChart();
            
            // Â∫îÁî®Âú∫ÊôØÂõæË°®
            initLifecycleChart();
            initMarketPenetrationChart();
            initTechnicalReadinessChart();
            initBusinessImpactChart();
            initIndustryDistributionChart();
            
            // ÊäÄÊúØÂèëÂ±ïÂõæË°®
            initTechTaxonomyChart();
            initInnovationCycleChart();
            initTechnologyMaturityChart();
            initConvergenceChart();
            initResearchHotspotsChart();
            
            // ‰ªªÂä°Âú∫ÊôØÂõæË°®
            initTaskComplexityChart();
            initAutomationReadinessChart();
            initHumanAiCollaborationChart();
            initEthicalConsiderationsChart();
            initPerformanceMetricsChart();
            initResourceRequirementsChart();
            
            // Ê∑±Â∫¶Ê¥ûÂØüÂõæË°®
            initConvergenceOpportunitiesChart();
            initInvestmentPriorityChart();
            
            // È¢ÑÊµãÂõæË°®
            initShortTermTrendsChart();
            initMediumTermTrendsChart();
            initPrediction2025Chart();
        }}

        function initOverviewSankey() {{
            const chart = echarts.init(document.getElementById('overviewSankey'));
            
            const option = {{
                title: {{
                    text: 'ÂõõÁª¥Â∫¶Êï∞ÊçÆÊµÅÂêëÂÖ®ÊôØ',
                    left: 'center',
                    textStyle: {{
                        fontSize: 18,
                        fontWeight: 'bold'
                    }}
                }},
                tooltip: {{
                    trigger: 'item',
                    triggerOn: 'mousemove'
                }},
                series: [{{
                    type: 'sankey',
                    layout: 'none',
                    emphasis: {{
                        focus: 'adjacency'
                    }},
                    data: [
                        {{name: 'Á†îÁ©∂È¢ÜÂüü'}},
                        {{name: 'Â∫îÁî®Âú∫ÊôØ'}},
                        {{name: 'ÊäÄÊúØÂèëÂ±ï'}},
                        {{name: '‰ªªÂä°Âú∫ÊôØ'}},
                        {{name: 'Educational Technology'}},
                        {{name: 'Content Creation'}},
                        {{name: 'Machine Learning'}},
                        {{name: 'Deep Learning'}},
                        {{name: 'Classification Tasks'}},
                        {{name: 'Generation Tasks'}}
                    ],
                    links: [
                        {{source: 'Á†îÁ©∂È¢ÜÂüü', target: 'Educational Technology', value: 10071}},
                        {{source: 'Á†îÁ©∂È¢ÜÂüü', target: 'Content Creation', value: 8342}},
                        {{source: 'Â∫îÁî®Âú∫ÊôØ', target: 'Educational Technology', value: 10071}},
                        {{source: 'Â∫îÁî®Âú∫ÊôØ', target: 'Content Creation', value: 8342}},
                        {{source: 'ÊäÄÊúØÂèëÂ±ï', target: 'Machine Learning', value: 82393}},
                        {{source: 'ÊäÄÊúØÂèëÂ±ï', target: 'Deep Learning', value: 49199}},
                        {{source: '‰ªªÂä°Âú∫ÊôØ', target: 'Classification Tasks', value: 3694}},
                        {{source: '‰ªªÂä°Âú∫ÊôØ', target: 'Generation Tasks', value: 3677}}
                    ],
                    lineStyle: {{
                        color: 'gradient',
                        curveness: 0.5
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initFieldCategoriesChart() {{
            const chart = echarts.init(document.getElementById('fieldCategoriesChart'));
            
            const fieldCategories = allData.detailed_analysis.detailed_research_fields.field_categories;
            const data = Object.keys(fieldCategories).map(category => ({{
                name: category,
                value: fieldCategories[category].total_papers,
                growth_rate: fieldCategories[category].avg_growth_rate
            }}));

            const option = {{
                title: {{
                    text: 'Á†îÁ©∂È¢ÜÂüüÂàÜÁ±ª‰ΩìÁ≥ª',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ËÆ∫ÊñáÊï∞: {{c}}<br/>Âπ≥ÂùáÂ¢ûÈïøÁéá: {{d}}%'
                }},
                series: [{{
                    type: 'treemap',
                    data: data.map(item => ({{
                        name: item.name,
                        value: item.value,
                        itemStyle: {{
                            color: `hsl(${{Math.random() * 360}}, 70%, 60%)`
                        }}
                    }}))
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initMaturityScoreChart() {{
            const chart = echarts.init(document.getElementById('maturityScoreChart'));
            
            const maturityData = allData.detailed_analysis.detailed_research_fields.research_maturity;
            const data = Object.keys(maturityData).map(field => ({{
                name: field,
                value: maturityData[field].maturity_score,
                level: maturityData[field].maturity_level
            }}));

            const option = {{
                title: {{
                    text: 'Á†îÁ©∂ÊàêÁÜüÂ∫¶ËØÑÂàÜ',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ÊàêÁÜüÂ∫¶ËØÑÂàÜ: {{c}}<br/>ÊàêÁÜüÂ∫¶Á≠âÁ∫ß: {{d}}'
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name),
                    axisLabel: {{
                        rotate: 45
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ÊàêÁÜüÂ∫¶ËØÑÂàÜ'
                }},
                series: [{{
                    type: 'bar',
                    data: data.map(item => item.value),
                    itemStyle: {{
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                            {{offset: 0, color: '#667eea'}},
                            {{offset: 1, color: '#764ba2'}}
                        ])
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initInnovationIndexChart() {{
            const chart = echarts.init(document.getElementById('innovationIndexChart'));
            
            const innovationData = allData.detailed_analysis.detailed_research_fields.innovation_index;
            const data = Object.keys(innovationData).map(field => ({{
                name: field,
                value: innovationData[field].innovation_score,
                level: innovationData[field].innovation_level
            }}));

            const option = {{
                title: {{
                    text: 'ÂàõÊñ∞ÊåáÊï∞ËØÑÂàÜ',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ÂàõÊñ∞ÊåáÊï∞: {{c}}<br/>ÂàõÊñ∞Á≠âÁ∫ß: {{d}}'
                }},
                radar: {{
                    indicator: data.map(item => ({{
                        name: item.name.length > 10 ? item.name.slice(0, 10) + '...' : item.name,
                        max: 100
                    }}))
                }},
                series: [{{
                    type: 'radar',
                    data: [{{
                        value: data.map(item => item.value),
                        name: 'ÂàõÊñ∞ÊåáÊï∞',
                        areaStyle: {{
                            color: 'rgba(102, 126, 234, 0.3)'
                        }}
                    }}]
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initInterdisciplinaryChart() {{
            const chart = echarts.init(document.getElementById('interdisciplinaryChart'));
            
            const interdisciplinaryData = allData.detailed_analysis.detailed_research_fields.interdisciplinary_analysis;
            
            // ÂàõÂª∫ËäÇÁÇπÂíåËæπ
            const nodes = Object.keys(interdisciplinaryData).map(field => ({{
                id: field,
                name: field,
                value: interdisciplinaryData[field].connection_count,
                category: 0
            }}));
            
            const links = [];
            Object.keys(interdisciplinaryData).forEach(field => {{
                interdisciplinaryData[field].connected_fields.forEach(connectedField => {{
                    links.push({{
                        source: field,
                        target: connectedField
                    }});
                }});
            }});

            const option = {{
                title: {{
                    text: 'Ë∑®Â≠¶ÁßëËøûÊé•ÁΩëÁªú',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ËøûÊé•Êï∞: {{c}}'
                }},
                series: [{{
                    type: 'graph',
                    layout: 'force',
                    data: nodes,
                    links: links,
                    categories: [{{name: 'Á†îÁ©∂È¢ÜÂüü'}}],
                    roam: true,
                    force: {{
                        repulsion: 100,
                        edgeLength: 50
                    }},
                    label: {{
                        show: true,
                        position: 'right'
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        // Â∫îÁî®Âú∫ÊôØÂõæË°®ÂàùÂßãÂåñÂáΩÊï∞
        function initLifecycleChart() {{
            const chart = echarts.init(document.getElementById('lifecycleChart'));
            
            const lifecycleData = allData.detailed_analysis.detailed_application_scenarios.scenario_lifecycle;
            const data = Object.keys(lifecycleData).map(scenario => ({{
                name: scenario,
                stage: lifecycleData[scenario].lifecycle_stage
            }}));

            const stageColors = {{
                'ÂØºÂÖ•Êúü': '#ff6b6b',
                'ÊàêÈïøÊúü': '#4ecdc4',
                'ÊàêÁÜüÊúü': '#45b7d1',
                'È•±ÂíåÊúü': '#96ceb4',
                'ËΩ¨ÂûãÊúü': '#feca57'
            }};

            const option = {{
                title: {{
                    text: 'Â∫îÁî®Âú∫ÊôØÁîüÂëΩÂë®ÊúüÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ÁîüÂëΩÂë®ÊúüÈò∂ÊÆµ: {{c}}'
                }},
                series: [{{
                    type: 'pie',
                    radius: ['40%', '70%'],
                    data: Object.keys(stageColors).map(stage => ({{
                        name: stage,
                        value: data.filter(item => item.stage === stage).length,
                        itemStyle: {{
                            color: stageColors[stage]
                        }}
                    }}))
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initMarketPenetrationChart() {{
            const chart = echarts.init(document.getElementById('marketPenetrationChart'));
            
            const penetrationData = allData.detailed_analysis.detailed_application_scenarios.market_penetration;
            const data = Object.keys(penetrationData).map(scenario => ({{
                name: scenario,
                value: penetrationData[scenario].penetration_score,
                level: penetrationData[scenario].penetration_level
            }}));

            const option = {{
                title: {{
                    text: 'Â∏ÇÂú∫Ê∏óÈÄèÂ∫¶ÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>Ê∏óÈÄèÂ∫¶: {{c}}%<br/>Á≠âÁ∫ß: {{d}}'
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name),
                    axisLabel: {{
                        rotate: 45
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'Ê∏óÈÄèÂ∫¶ËØÑÂàÜ'
                }},
                series: [{{
                    type: 'bar',
                    data: data.map(item => item.value),
                    itemStyle: {{
                        color: function(params) {{
                            const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4'];
                            return colors[params.dataIndex % colors.length];
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initTechnicalReadinessChart() {{
            const chart = echarts.init(document.getElementById('technicalReadinessChart'));
            
            const readinessData = allData.detailed_analysis.detailed_application_scenarios.technical_readiness;
            const data = Object.keys(readinessData).map(scenario => ({{
                name: scenario,
                value: readinessData[scenario].score,
                level: readinessData[scenario].level,
                status: readinessData[scenario].status
            }}));

            const option = {{
                title: {{
                    text: 'ÊäÄÊúØÂ∞±Áª™Â∫¶ËØÑ‰º∞',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>TRLËØÑÂàÜ: {{c}}<br/>Áä∂ÊÄÅ: {{d}}'
                }},
                radar: {{
                    indicator: data.map(item => ({{
                        name: item.name.length > 8 ? item.name.slice(0, 8) + '...' : item.name,
                        max: 100
                    }}))
                }},
                series: [{{
                    type: 'radar',
                    data: [{{
                        value: data.map(item => item.value),
                        name: 'ÊäÄÊúØÂ∞±Áª™Â∫¶',
                        areaStyle: {{
                            color: 'rgba(118, 75, 162, 0.3)'
                        }}
                    }}]
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initBusinessImpactChart() {{
            const chart = echarts.init(document.getElementById('businessImpactChart'));
            
            const businessData = allData.detailed_analysis.detailed_application_scenarios.business_impact;
            const data = Object.keys(businessData).map(scenario => ({{
                name: scenario,
                business_value: businessData[scenario].business_value,
                investment_attractiveness: businessData[scenario].investment_attractiveness,
                roi_potential: businessData[scenario].roi_potential
            }}));

            const valueMapping = {{'ÊûÅÈ´ò': 4, 'È´ò': 3, '‰∏≠Á≠â': 2, '‰Ωé': 1}};

            const option = {{
                title: {{
                    text: 'ÂïÜ‰∏öÂΩ±ÂìçÂäõÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: function(params) {{
                        const item = data[params.dataIndex];
                        return `${{item.name}}<br/>ÂïÜ‰∏ö‰ª∑ÂÄº: ${{item.business_value}}<br/>ÊäïËµÑÂê∏ÂºïÂäõ: ${{item.investment_attractiveness}}<br/>ROIÊΩúÂäõ: ${{item.roi_potential}}`;
                    }}
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name),
                    axisLabel: {{
                        rotate: 45
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ÂïÜ‰∏ö‰ª∑ÂÄºËØÑÂàÜ'
                }},
                series: [{{
                    type: 'bar',
                    data: data.map(item => valueMapping[item.business_value] || 2),
                    itemStyle: {{
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                            {{offset: 0, color: '#667eea'}},
                            {{offset: 1, color: '#764ba2'}}
                        ])
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initIndustryDistributionChart() {{
            const chart = echarts.init(document.getElementById('industryDistributionChart'));
            
            const industryData = allData.detailed_analysis.detailed_application_scenarios.industry_distribution;
            
            // ÁªüËÆ°Ë°å‰∏öÂàÜÂ∏É
            const industryCount = {{}};
            Object.keys(industryData).forEach(scenario => {{
                industryData[scenario].primary_industries.forEach(industry => {{
                    industryCount[industry] = (industryCount[industry] || 0) + 1;
                }});
            }});

            const data = Object.keys(industryCount).map(industry => ({{
                name: industry,
                value: industryCount[industry]
            }}));

            const option = {{
                title: {{
                    text: '‰∏ªË¶ÅÂ∫îÁî®Ë°å‰∏öÂàÜÂ∏É',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}: {{c}} ({{d}}%)'
                }},
                series: [{{
                    type: 'pie',
                    radius: '60%',
                    data: data,
                    emphasis: {{
                        itemStyle: {{
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        // ÊäÄÊúØÂèëÂ±ïÂõæË°®
        function initTechTaxonomyChart() {{
            const chart = echarts.init(document.getElementById('techTaxonomyChart'));
            
            const taxonomyData = allData.detailed_analysis.detailed_technology_trends.technology_taxonomy;
            const data = Object.keys(taxonomyData).map(category => ({{
                name: category,
                value: taxonomyData[category].total_mentions,
                maturity: taxonomyData[category].maturity,
                adoption: taxonomyData[category].adoption_rate
            }}));

            const option = {{
                title: {{
                    text: 'ÊäÄÊúØÂàÜÁ±ª‰ΩìÁ≥ªÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ÊèêÂèäÊ¨°Êï∞: {{c}}<br/>ÊàêÁÜüÂ∫¶: {{d}}'
                }},
                series: [{{
                    type: 'treemap',
                    data: data.map(item => ({{
                        name: item.name,
                        value: item.value,
                        itemStyle: {{
                            color: item.maturity === 'mature' ? '#4CAF50' : 
                                   item.maturity === 'developing' ? '#2196F3' :
                                   item.maturity === 'emerging' ? '#FF9800' : '#f44336'
                        }}
                    }}))
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initInnovationCycleChart() {{
            const chart = echarts.init(document.getElementById('innovationCycleChart'));
            
            const cycleData = allData.detailed_analysis.detailed_technology_trends.innovation_cycles;
            const data = Object.keys(cycleData).map(tech => ({{
                name: tech,
                stage: cycleData[tech].cycle_stage,
                position: cycleData[tech].cycle_position,
                potential: cycleData[tech].innovation_potential
            }}));

            const stageColors = {{
                'ËêåËäΩÊúü': '#ff6b6b',
                'ÂèëÂ±ïÊúü': '#4ecdc4', 
                'Â¢ûÈïøÊúü': '#45b7d1',
                'ÊàêÁÜüÊúü': '#96ceb4'
            }};

            const option = {{
                title: {{
                    text: 'ÊäÄÊúØÂàõÊñ∞Âë®ÊúüÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>Âë®ÊúüÈò∂ÊÆµ: {{c}}<br/>ÂàõÊñ∞ÊΩúÂäõ: {{d}}%'
                }},
                series: [{{
                    type: 'pie',
                    radius: ['30%', '60%'],
                    data: Object.keys(stageColors).map(stage => ({{
                        name: stage,
                        value: data.filter(item => item.stage === stage).length,
                        itemStyle: {{
                            color: stageColors[stage]
                        }}
                    }}))
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initTechnologyMaturityChart() {{
            const chart = echarts.init(document.getElementById('technologyMaturityChart'));
            
            const taxonomyData = allData.detailed_analysis.detailed_technology_trends.technology_taxonomy;
            const data = [];
            
            Object.keys(taxonomyData).forEach(category => {{
                Object.keys(taxonomyData[category].technology_details).forEach(tech => {{
                    const detail = taxonomyData[category].technology_details[tech];
                    data.push({{
                        name: tech,
                        value: [detail.maturity_score, detail.application_breadth.score],
                        category: category
                    }});
                }});
            }});

            const option = {{
                title: {{
                    text: 'ÊäÄÊúØÊàêÁÜüÂ∫¶ vs Â∫îÁî®ÂπøÂ∫¶',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ÊàêÁÜüÂ∫¶: {{c0}}<br/>Â∫îÁî®ÂπøÂ∫¶: {{c1}}'
                }},
                xAxis: {{
                    type: 'value',
                    name: 'ÊäÄÊúØÊàêÁÜüÂ∫¶',
                    max: 100
                }},
                yAxis: {{
                    type: 'value',
                    name: 'Â∫îÁî®ÂπøÂ∫¶',
                    max: 100
                }},
                series: [{{
                    type: 'scatter',
                    data: data.map(item => item.value),
                    symbolSize: 20,
                    itemStyle: {{
                        color: function(params) {{
                            const colors = ['#667eea', '#764ba2', '#4ecdc4', '#ff6b6b'];
                            return colors[params.dataIndex % colors.length];
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initConvergenceChart() {{
            const chart = echarts.init(document.getElementById('convergenceChart'));
            
            const convergenceData = allData.detailed_analysis.detailed_technology_trends.convergence_analysis;
            const data = Object.keys(convergenceData).map(pattern => ({{
                name: pattern,
                value: convergenceData[pattern].convergence_score,
                maturity: convergenceData[pattern].maturity,
                technologies: convergenceData[pattern].technologies
            }}));

            const option = {{
                title: {{
                    text: 'ÊäÄÊúØËûçÂêàÊ®°ÂºèÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: function(params) {{
                        const item = data[params.dataIndex];
                        return `${{item.name}}<br/>ËûçÂêàÂàÜÊï∞: ${{item.value}}<br/>ÊàêÁÜüÂ∫¶: ${{item.maturity}}<br/>Ê∂âÂèäÊäÄÊúØ: ${{item.technologies.join(', ')}}`;
                    }}
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name),
                    axisLabel: {{
                        rotate: 0
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ËûçÂêàËØÑÂàÜ'
                }},
                series: [{{
                    type: 'bar',
                    data: data.map(item => item.value),
                    itemStyle: {{
                        color: function(params) {{
                            const item = data[params.dataIndex];
                            return item.maturity === 'ÊàêÁÜüËûçÂêà' ? '#4CAF50' : 
                                   item.maturity === 'ÂèëÂ±ï‰∏≠ËûçÂêà' ? '#2196F3' : '#FF9800';
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initResearchHotspotsChart() {{
            const chart = echarts.init(document.getElementById('researchHotspotsChart'));
            
            const hotspotsData = allData.detailed_analysis.detailed_technology_trends.research_hotspots;
            
            // ÂêàÂπ∂ÊâÄÊúâÁÉ≠ÁÇπ
            const allHotspots = [
                ...hotspotsData.current_hotspots,
                ...hotspotsData.emerging_topics,
                ...hotspotsData.interdisciplinary_topics
            ];

            const data = allHotspots.map(hotspot => ({{
                name: hotspot.keyword,
                value: hotspot.mentions,
                category: hotspot.category
            }}));

            const option = {{
                title: {{
                    text: 'Á†îÁ©∂ÁÉ≠ÁÇπÂàÜÂ∏É',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>ÊèêÂèäÊ¨°Êï∞: {{c}}<br/>Á±ªÂà´: {{d}}'
                }},
                series: [{{
                    type: 'wordCloud',
                    gridSize: 2,
                    sizeRange: [12, 50],
                    rotationRange: [-90, 90],
                    shape: 'pentagon',
                    data: data.slice(0, 30),  // Âè™ÊòæÁ§∫Ââç30‰∏™
                    textStyle: {{
                        color: function() {{
                            const colors = ['#667eea', '#764ba2', '#4ecdc4', '#ff6b6b', '#96ceb4'];
                            return colors[Math.floor(Math.random() * colors.length)];
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        // ‰ªªÂä°Âú∫ÊôØÂõæË°®
        function initTaskComplexityChart() {{
            const chart = echarts.init(document.getElementById('taskComplexityChart'));
            
            const complexityData = allData.detailed_analysis.detailed_task_scenarios.task_complexity_analysis;
            const data = Object.keys(complexityData).map(task => ({{
                name: task,
                value: complexityData[task].complexity_score,
                level: complexityData[task].complexity_level
            }}));

            const option = {{
                title: {{
                    text: '‰ªªÂä°Â§çÊùÇÂ∫¶ÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>Â§çÊùÇÂ∫¶ËØÑÂàÜ: {{c}}<br/>Â§çÊùÇÂ∫¶Á≠âÁ∫ß: {{d}}'
                }},
                radar: {{
                    indicator: data.map(item => ({{
                        name: item.name.replace(' Tasks', ''),
                        max: 100
                    }}))
                }},
                series: [{{
                    type: 'radar',
                    data: [{{
                        value: data.map(item => item.value),
                        name: '‰ªªÂä°Â§çÊùÇÂ∫¶',
                        areaStyle: {{
                            color: 'rgba(102, 126, 234, 0.3)'
                        }}
                    }}]
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initAutomationReadinessChart() {{
            const chart = echarts.init(document.getElementById('automationReadinessChart'));
            
            const automationData = allData.detailed_analysis.detailed_task_scenarios.automation_readiness;
            const data = Object.keys(automationData).map(task => ({{
                name: task.replace(' Tasks', ''),
                value: automationData[task].readiness_score,
                level: automationData[task].automation_level,
                timeline: automationData[task].timeline
            }}));

            const option = {{
                title: {{
                    text: 'Ëá™Âä®ÂåñÂ∞±Áª™Â∫¶ËØÑ‰º∞',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>Â∞±Áª™Â∫¶: {{c}}%<br/>Ëá™Âä®ÂåñÁ≠âÁ∫ß: {{d}}'
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name),
                    axisLabel: {{
                        rotate: 45
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'Ëá™Âä®ÂåñÂ∞±Áª™Â∫¶ (%)',
                    max: 100
                }},
                series: [{{
                    type: 'bar',
                    data: data.map(item => item.value),
                    itemStyle: {{
                        color: function(params) {{
                            const value = data[params.dataIndex].value;
                            if (value >= 80) return '#4CAF50';
                            if (value >= 60) return '#2196F3';
                            if (value >= 40) return '#FF9800';
                            return '#f44336';
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initHumanAiCollaborationChart() {{
            const chart = echarts.init(document.getElementById('humanAiCollaborationChart'));
            
            const collaborationData = allData.detailed_analysis.detailed_task_scenarios.human_ai_collaboration;
            
            // ÁªüËÆ°Âçè‰ΩúÊ®°Âºè
            const modeCount = {{}};
            Object.keys(collaborationData).forEach(task => {{
                const mode = collaborationData[task].collaboration_mode;
                modeCount[mode] = (modeCount[mode] || 0) + 1;
            }});

            const data = Object.keys(modeCount).map(mode => ({{
                name: mode,
                value: modeCount[mode]
            }}));

            const option = {{
                title: {{
                    text: '‰∫∫Êú∫Âçè‰ΩúÊ®°ÂºèÂàÜÂ∏É',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}: {{c}} ({{d}}%)'
                }},
                series: [{{
                    type: 'pie',
                    radius: '60%',
                    data: data,
                    emphasis: {{
                        itemStyle: {{
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initEthicalConsiderationsChart() {{
            const chart = echarts.init(document.getElementById('ethicalConsiderationsChart'));
            
            const ethicalData = allData.detailed_analysis.detailed_task_scenarios.ethical_considerations;
            
            // ÁªüËÆ°È£éÈô©Á≠âÁ∫ß
            const riskCount = {{}};
            Object.keys(ethicalData).forEach(task => {{
                const risk = ethicalData[task].risk_level;
                riskCount[risk] = (riskCount[risk] || 0) + 1;
            }});

            const data = Object.keys(riskCount).map(risk => ({{
                name: risk,
                value: riskCount[risk]
            }}));

            const riskColors = {{
                'Very High': '#f44336',
                'High': '#FF9800',
                'Medium': '#2196F3',
                'Low': '#4CAF50',
                'Variable': '#9C27B0'
            }};

            const option = {{
                title: {{
                    text: '‰º¶ÁêÜÈ£éÈô©Á≠âÁ∫ßÂàÜÂ∏É',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}: {{c}} ({{d}}%)'
                }},
                series: [{{
                    type: 'pie',
                    radius: ['30%', '60%'],
                    data: data.map(item => ({{
                        name: item.name,
                        value: item.value,
                        itemStyle: {{
                            color: riskColors[item.name] || '#ccc'
                        }}
                    }}))
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initPerformanceMetricsChart() {{
            const chart = echarts.init(document.getElementById('performanceMetricsChart'));
            
            const metricsData = allData.detailed_analysis.detailed_task_scenarios.performance_metrics;
            const data = Object.keys(metricsData).map(task => ({{
                name: task.replace(' Tasks', ''),
                threshold: metricsData[task].success_threshold,
                sota: metricsData[task].current_sota
            }}));

            const option = {{
                title: {{
                    text: 'ÊÄßËÉΩÊåáÊ†áÂØπÊØî',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'axis',
                    formatter: function(params) {{
                        let result = params[0].axisValue + '<br/>';
                        params.forEach(param => {{
                            result += param.seriesName + ': ' + (param.value * 100).toFixed(1) + '%<br/>';
                        }});
                        return result;
                    }}
                }},
                legend: {{
                    data: ['ÊàêÂäüÈòàÂÄº', 'ÂΩìÂâçSOTA'],
                    top: 30
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name),
                    axisLabel: {{
                        rotate: 45
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ÊÄßËÉΩÊåáÊ†á',
                    max: 1,
                    axisLabel: {{
                        formatter: '{{value}}%'
                    }}
                }},
                series: [
                    {{
                        name: 'ÊàêÂäüÈòàÂÄº',
                        type: 'bar',
                        data: data.map(item => item.threshold),
                        itemStyle: {{
                            color: '#FF9800'
                        }}
                    }},
                    {{
                        name: 'ÂΩìÂâçSOTA',
                        type: 'bar',
                        data: data.map(item => item.sota),
                        itemStyle: {{
                            color: '#4CAF50'
                        }}
                    }}
                ]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initResourceRequirementsChart() {{
            const chart = echarts.init(document.getElementById('resourceRequirementsChart'));
            
            const resourceData = allData.detailed_analysis.detailed_task_scenarios.resource_requirements;
            
            // ËΩ¨Êç¢ËµÑÊ∫êÁ≠âÁ∫ß‰∏∫Êï∞ÂÄº
            const levelMapping = {{
                'very_low': 1, 'low': 2, 'medium': 3, 'high': 4, 'very_high': 5,
                'short': 1, 'medium': 3, 'long': 4, 'very_long': 5
            }};

            const data = Object.keys(resourceData).map(task => ({{
                name: task.replace(' Tasks', ''),
                computational: levelMapping[resourceData[task].computational_cost] || 3,
                memory: levelMapping[resourceData[task].memory_requirements] || 3,
                data: levelMapping[resourceData[task].data_volume_needed] || 3,
                training: levelMapping[resourceData[task].training_time] || 3
            }}));

            const option = {{
                title: {{
                    text: 'ËµÑÊ∫êÈúÄÊ±ÇÂàÜÊûê',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'axis'
                }},
                legend: {{
                    data: ['ËÆ°ÁÆóÊàêÊú¨', 'ÂÜÖÂ≠òÈúÄÊ±Ç', 'Êï∞ÊçÆÈáè', 'ËÆ≠ÁªÉÊó∂Èó¥'],
                    top: 30
                }},
                radar: {{
                    indicator: data.map(item => ({{
                        name: item.name,
                        max: 5
                    }}))
                }},
                series: [
                    {{
                        type: 'radar',
                        data: [
                            {{
                                value: data.map(item => item.computational),
                                name: 'ËÆ°ÁÆóÊàêÊú¨',
                                areaStyle: {{color: 'rgba(255, 152, 0, 0.3)'}}
                            }},
                            {{
                                value: data.map(item => item.memory),
                                name: 'ÂÜÖÂ≠òÈúÄÊ±Ç',
                                areaStyle: {{color: 'rgba(33, 150, 243, 0.3)'}}
                            }},
                            {{
                                value: data.map(item => item.data),
                                name: 'Êï∞ÊçÆÈáè',
                                areaStyle: {{color: 'rgba(76, 175, 80, 0.3)'}}
                            }},
                            {{
                                value: data.map(item => item.training),
                                name: 'ËÆ≠ÁªÉÊó∂Èó¥',
                                areaStyle: {{color: 'rgba(244, 67, 54, 0.3)'}}
                            }}
                        ]
                    }}
                ]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        // Ê∑±Â∫¶Ê¥ûÂØüÂõæË°®
        function initConvergenceOpportunitiesChart() {{
            const chart = echarts.init(document.getElementById('convergenceOpportunitiesChart'));
            
            const opportunities = allData.detailed_analysis.cross_dimensional_insights.convergence_opportunities;
            
            const data = opportunities.map(opp => ({{
                name: opp.area,
                potential: opp.potential === 'Very High' ? 5 : opp.potential === 'High' ? 4 : 3,
                timeline: opp.timeline,
                components: opp.components
            }}));

            const option = {{
                title: {{
                    text: 'ËûçÂêàÊú∫‰ºöËØÜÂà´',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: function(params) {{
                        const item = data[params.dataIndex];
                        return `${{item.name}}<br/>ÊΩúÂäõÁ≠âÁ∫ß: ${{item.potential}}<br/>Êó∂Èó¥Á∫ø: ${{item.timeline}}<br/>ÁªÑÊàêË¶ÅÁ¥†: ${{item.components.join(', ')}}`;
                    }}
                }},
                xAxis: {{
                    type: 'category',
                    data: data.map(item => item.name)
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ÊΩúÂäõÁ≠âÁ∫ß',
                    max: 5
                }},
                series: [{{
                    type: 'bar',
                    data: data.map(item => item.potential),
                    itemStyle: {{
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                            {{offset: 0, color: '#667eea'}},
                            {{offset: 1, color: '#764ba2'}}
                        ])
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initInvestmentPriorityChart() {{
            const chart = echarts.init(document.getElementById('investmentPriorityChart'));
            
            // Âü∫‰∫éÂêÑÁª¥Â∫¶Êï∞ÊçÆËÆ°ÁÆóÊäïËµÑ‰ºòÂÖàÁ∫ß
            const researchFields = allData.trends_data.research_fields_trends;
            const priorities = Object.keys(researchFields).map(field => {{
                const data = researchFields[field];
                const growthScore = Math.min(data.growth_rate / 10, 10);  // Â¢ûÈïøÁéáËØÑÂàÜ
                const scaleScore = Math.min(data.total_papers / 1000, 10);  // ËßÑÊ®°ËØÑÂàÜ
                const priorityScore = (growthScore + scaleScore) / 2;
                
                return {{
                    name: field,
                    growth: data.growth_rate,
                    scale: data.total_papers,
                    priority: priorityScore
                }};
            }}).sort((a, b) => b.priority - a.priority).slice(0, 8);

            const option = {{
                title: {{
                    text: 'ÊäïËµÑ‰ºòÂÖàÁ∫ßÁü©Èòµ',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>Â¢ûÈïøÁéá: {{c0}}%<br/>ËßÑÊ®°: {{c1}}ÁØá<br/>‰ºòÂÖàÁ∫ß: {{c2}}'
                }},
                xAxis: {{
                    type: 'value',
                    name: 'Â¢ûÈïøÁéá (%)',
                    max: 60
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ËÆ∫ÊñáËßÑÊ®°',
                    max: 12000
                }},
                series: [{{
                    type: 'scatter',
                    data: priorities.map(item => [item.growth, item.scale, item.priority]),
                    symbolSize: function(data) {{
                        return data[2] * 5;  // Ê†πÊçÆ‰ºòÂÖàÁ∫ßË∞ÉÊï¥Ê∞îÊ≥°Â§ßÂ∞è
                    }},
                    itemStyle: {{
                        color: function(params) {{
                            const priority = params.data[2];
                            if (priority >= 8) return '#4CAF50';
                            if (priority >= 6) return '#2196F3';
                            if (priority >= 4) return '#FF9800';
                            return '#f44336';
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        // È¢ÑÊµãÂõæË°®
        function initShortTermTrendsChart() {{
            const chart = echarts.init(document.getElementById('shortTermTrendsChart'));
            
            const shortTermTrends = allData.detailed_analysis.detailed_technology_trends.future_directions.short_term_trends;
            
            const data = shortTermTrends.map(trend => ({{
                name: trend.trend,
                probability: trend.probability * 100,
                impact: trend.impact === 'high' ? 3 : trend.impact === 'medium' ? 2 : 1
            }}));

            const option = {{
                title: {{
                    text: 'Áü≠ÊúüË∂ãÂäøÈ¢ÑÊµã (2024-2025)',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}<br/>Ê¶ÇÁéá: {{c0}}%<br/>ÂΩ±ÂìçÁ®ãÂ∫¶: {{c1}}'
                }},
                xAxis: {{
                    type: 'value',
                    name: 'ÂÆûÁé∞Ê¶ÇÁéá (%)',
                    max: 100
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ÂΩ±ÂìçÁ®ãÂ∫¶',
                    max: 4
                }},
                series: [{{
                    type: 'scatter',
                    data: data.map(item => [item.probability, item.impact]),
                    symbolSize: function(data) {{
                        return data[0] / 2;  // Ê†πÊçÆÊ¶ÇÁéáË∞ÉÊï¥Ê∞îÊ≥°Â§ßÂ∞è
                    }},
                    itemStyle: {{
                        color: function(params) {{
                            const impact = params.data[1];
                            if (impact >= 3) return '#4CAF50';
                            if (impact >= 2) return '#2196F3';
                            return '#FF9800';
                        }}
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initMediumTermTrendsChart() {{
            const chart = echarts.init(document.getElementById('mediumTermTrendsChart'));
            
            const mediumTermTrends = allData.detailed_analysis.detailed_technology_trends.future_directions.medium_term_trends;
            
            const data = mediumTermTrends.map(trend => ({{
                name: trend.trend,
                value: trend.probability * 100
            }}));

            const option = {{
                title: {{
                    text: '‰∏≠ÊúüÂèëÂ±ïÈ¢ÑÊµã (2025-2027)',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'item',
                    formatter: '{{b}}: {{c}}%'
                }},
                series: [{{
                    type: 'pie',
                    radius: ['30%', '60%'],
                    data: data,
                    emphasis: {{
                        itemStyle: {{
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }}
                    }},
                    label: {{
                        show: true,
                        formatter: '{{b}}\\n{{c}}%'
                    }}
                }}]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function initPrediction2025Chart() {{
            const chart = echarts.init(document.getElementById('prediction2025Chart'));
            
            // Âü∫‰∫éÂéÜÂè≤Â¢ûÈïøÁéáÈ¢ÑÊµã2025Âπ¥ËßÑÊ®°
            const researchFields = allData.trends_data.research_fields_trends;
            const predictions = Object.keys(researchFields).map(field => {{
                const data = researchFields[field];
                const currentPapers = data.total_papers;
                const growthRate = data.growth_rate / 100;
                const predicted2025 = Math.round(currentPapers * Math.pow(1 + growthRate, 2));  // ÂÅáËÆæ2Âπ¥Â¢ûÈïø
                
                return {{
                    name: field,
                    current: currentPapers,
                    predicted: predicted2025
                }};
            }}).sort((a, b) => b.predicted - a.predicted).slice(0, 8);

            const option = {{
                title: {{
                    text: '2025Âπ¥È¢ÜÂüüËßÑÊ®°È¢ÑÊµã',
                    left: 'center'
                }},
                tooltip: {{
                    trigger: 'axis',
                    formatter: function(params) {{
                        let result = params[0].axisValue + '<br/>';
                        params.forEach(param => {{
                            result += param.seriesName + ': ' + param.value.toLocaleString() + 'ÁØá<br/>';
                        }});
                        return result;
                    }}
                }},
                legend: {{
                    data: ['ÂΩìÂâçËßÑÊ®°', 'È¢ÑÊµãËßÑÊ®°'],
                    top: 30
                }},
                xAxis: {{
                    type: 'category',
                    data: predictions.map(item => item.name.length > 12 ? item.name.slice(0, 12) + '...' : item.name),
                    axisLabel: {{
                        rotate: 45
                    }}
                }},
                yAxis: {{
                    type: 'value',
                    name: 'ËÆ∫ÊñáÊï∞Èáè'
                }},
                series: [
                    {{
                        name: 'ÂΩìÂâçËßÑÊ®°',
                        type: 'bar',
                        data: predictions.map(item => item.current),
                        itemStyle: {{
                            color: '#2196F3'
                        }}
                    }},
                    {{
                        name: 'È¢ÑÊµãËßÑÊ®°',
                        type: 'bar',
                        data: predictions.map(item => item.predicted),
                        itemStyle: {{
                            color: '#4CAF50'
                        }}
                    }}
                ]
            }};
            
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());
        }}

        function setupNavigation() {{
            // Âπ≥ÊªëÊªöÂä®
            document.querySelectorAll('.nav-item').forEach(item => {{
                item.addEventListener('click', function(e) {{
                    e.preventDefault();
                    const targetId = this.getAttribute('href').substring(1);
                    const targetElement = document.getElementById(targetId);
                    if (targetElement) {{
                        targetElement.scrollIntoView({{
                            behavior: 'smooth'
                        }});
                    }}
                }});
            }});
        }}

        function populateDataTables() {{
            // Â°´ÂÖÖÁ†îÁ©∂È¢ÜÂüüÊï∞ÊçÆË°®
            const researchFieldsTable = document.getElementById('researchFieldsTable');
            const researchFields = allData.trends_data.research_fields_trends;
            const maturityData = allData.detailed_analysis.detailed_research_fields.research_maturity;
            const innovationData = allData.detailed_analysis.detailed_research_fields.innovation_index;
            
            Object.keys(researchFields).forEach(field => {{
                const row = researchFieldsTable.insertRow();
                const fieldData = researchFields[field];
                const maturity = maturityData[field] || {{}};
                const innovation = innovationData[field] || {{}};
                
                row.innerHTML = `
                    <td>${{field}}</td>
                    <td>${{fieldData.total_papers.toLocaleString()}}</td>
                    <td><span class="trend-up">${{fieldData.growth_rate.toFixed(1)}}%</span></td>
                    <td>${{maturity.maturity_level || 'N/A'}}</td>
                    <td>${{innovation.innovation_level || 'N/A'}}</td>
                    <td>${{fieldData.trend_type || 'N/A'}}</td>
                `;
            }});
        }}
    </script>
</body>
</html>"""

def main():
    """‰∏ªÂáΩÊï∞"""
    print("üöÄ ÂêØÂä®Â¢ûÂº∫ÁâàÂèØËßÜÂåñÁîüÊàê...")
    
    generator = EnhancedVisualizationGenerator()
    output_file = generator.generate_enhanced_visualization()
    
    print("\n" + "="*60)
    print("üé® Â¢ûÂº∫ÁâàÂèØËßÜÂåñÈ°µÈù¢ÁîüÊàêÂÆåÊàêÔºÅ")
    print(f"üìÅ Êñá‰ª∂‰ΩçÁΩÆ: {output_file}")
    print("üåê Âú®ÊµèËßàÂô®‰∏≠ÊâìÂºÄËØ•Êñá‰ª∂Âç≥ÂèØÊü•ÁúãÂÆåÊï¥ÁöÑÊ∑±Â∫¶ÂàÜÊûêÂèØËßÜÂåñ")
    
    return output_file

if __name__ == "__main__":
    main()